name: Certificate Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'generate'
        type: choice
        options:
        - generate
        - renew
        - export
      certificate_subject:
        description: 'Certificate subject (CN=...)'
        required: false
        default: 'CN=FastCopy Developer'
      validity_days:
        description: 'Certificate validity in days'
        required: false
        default: '365'
        type: number

env:
  CERTIFICATE_PASSWORD: FastCopy123!

jobs:
  certificate-management:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Generate or renew certificate
      if: github.event.inputs.action == 'generate' || github.event.inputs.action == 'renew'
      shell: powershell
      run: |
        $subject = "${{ github.event.inputs.certificate_subject }}"
        $validityDays = [int]"${{ github.event.inputs.validity_days }}"
        
        # 如果是续期，先删除旧证书
        if ("${{ github.event.inputs.action }}" -eq "renew") {
          echo "Removing existing certificates..."
          Get-ChildItem -Path Cert:\CurrentUser\My | Where-Object { $_.Subject -eq $subject } | Remove-Item
          Get-ChildItem -Path Cert:\LocalMachine\Root | Where-Object { $_.Subject -eq $subject } | Remove-Item
          Get-ChildItem -Path Cert:\LocalMachine\TrustedPublisher | Where-Object { $_.Subject -eq $subject } | Remove-Item
        }
        
        # 创建新的自签名证书
        echo "Creating new certificate with subject: $subject"
        echo "Validity period: $validityDays days"
        
        $cert = New-SelfSignedCertificate `
          -Type CodeSigningCert `
          -Subject $subject `
          -KeyAlgorithm RSA `
          -KeyLength 2048 `
          -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" `
          -KeyExportPolicy Exportable `
          -KeyUsage DigitalSignature `
          -CertStoreLocation Cert:\CurrentUser\My `
          -NotAfter (Get-Date).AddDays($validityDays)
        
        echo "Certificate created successfully"
        echo "Thumbprint: $($cert.Thumbprint)"
        echo "Subject: $($cert.Subject)"
        echo "Not Before: $($cert.NotBefore)"
        echo "Not After: $($cert.NotAfter)"
        
        # 导出证书
        $password = ConvertTo-SecureString -String "$env:CERTIFICATE_PASSWORD" -Force -AsPlainText
        
        # 导出 PFX (包含私钥)
        Export-PfxCertificate -cert "Cert:\CurrentUser\My\$($cert.thumbprint)" -FilePath "FastCopy-CodeSigning.pfx" -Password $password
        
        # 导出 CRT (公钥证书)
        Export-Certificate -Cert "Cert:\CurrentUser\My\$($cert.thumbprint)" -FilePath "FastCopy-CodeSigning.crt"
        
        # 创建证书信息文本文件
        echo "Certificate Information" > Certificate-Info.txt
        echo "=======================" >> Certificate-Info.txt
        echo "Subject: $($cert.Subject)" >> Certificate-Info.txt
        echo "Issuer: $($cert.Issuer)" >> Certificate-Info.txt
        echo "Thumbprint: $($cert.Thumbprint)" >> Certificate-Info.txt
        echo "Serial Number: $($cert.SerialNumber)" >> Certificate-Info.txt
        echo "Not Before: $($cert.NotBefore)" >> Certificate-Info.txt
        echo "Not After: $($cert.NotAfter)" >> Certificate-Info.txt
        echo "Key Algorithm: $($cert.PublicKey.Oid.FriendlyName)" >> Certificate-Info.txt
        echo "Key Size: $($cert.PublicKey.Key.KeySize) bits" >> Certificate-Info.txt
        echo "" >> Certificate-Info.txt
        echo "Installation Instructions:" >> Certificate-Info.txt
        echo "=========================" >> Certificate-Info.txt
        echo "1. Install the certificate to Trusted Root Certification Authorities:" >> Certificate-Info.txt
        echo "   certlm.msc -> Trusted Root Certification Authorities -> Certificates -> Import FastCopy-CodeSigning.crt" >> Certificate-Info.txt
        echo "" >> Certificate-Info.txt
        echo "2. Or use PowerShell (Run as Administrator):" >> Certificate-Info.txt
        echo "   Import-Certificate -FilePath `"FastCopy-CodeSigning.crt`" -CertStoreLocation Cert:\LocalMachine\Root" >> Certificate-Info.txt
        echo "" >> Certificate-Info.txt
        echo "Usage for Signing:" >> Certificate-Info.txt
        echo "==================" >> Certificate-Info.txt
        echo "signtool sign /fd SHA256 /f `"FastCopy-CodeSigning.pfx`" /p `"`$env:CERTIFICATE_PASSWORD`" `"your-file.exe`"" >> Certificate-Info.txt
        
        echo "Certificate files created:"
        echo "- FastCopy-CodeSigning.pfx (Private key + Certificate)"
        echo "- FastCopy-CodeSigning.crt (Public certificate only)"
        echo "- Certificate-Info.txt (Certificate information and usage instructions)"
        
    - name: Export existing certificate
      if: github.event.inputs.action == 'export'
      shell: powershell
      run: |
        $subject = "${{ github.event.inputs.certificate_subject }}"
        
        # 查找现有证书
        $cert = Get-ChildItem -Path Cert:\CurrentUser\My | Where-Object { $_.Subject -eq $subject } | Select-Object -First 1
        
        if ($cert) {
          echo "Found existing certificate:"
          echo "Subject: $($cert.Subject)"
          echo "Thumbprint: $($cert.Thumbprint)"
          echo "Not After: $($cert.NotAfter)"
          
          # 检查证书是否即将过期（30天内）
          $daysUntilExpiry = ($cert.NotAfter - (Get-Date)).Days
          if ($daysUntilExpiry -lt 30) {
            echo "⚠️ WARNING: Certificate will expire in $daysUntilExpiry days!"
          } else {
            echo "✅ Certificate is valid for $daysUntilExpiry more days"
          }
          
          # 导出证书
          $password = ConvertTo-SecureString -String "$env:CERTIFICATE_PASSWORD" -Force -AsPlainText
          Export-PfxCertificate -cert $cert -FilePath "FastCopy-CodeSigning.pfx" -Password $password
          Export-Certificate -Cert $cert -FilePath "FastCopy-CodeSigning.crt"
          
          echo "Certificate exported successfully"
        } else {
          echo "❌ No certificate found with subject: $subject"
          echo "Available certificates:"
          Get-ChildItem -Path Cert:\CurrentUser\My | Where-Object { $_.HasPrivateKey -eq $true } | Select-Object Subject, Thumbprint, NotAfter
          exit 1
        }
        
    - name: Upload certificate files
      uses: actions/upload-artifact@v4
      with:
        name: FastCopy-Certificate-${{ github.run_number }}
        path: |
          FastCopy-CodeSigning.pfx
          FastCopy-CodeSigning.crt
          Certificate-Info.txt
        retention-days: 90
        
    - name: Create certificate summary
      shell: powershell
      run: |
        echo "## Certificate Management Summary" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "**Action performed:** ${{ github.event.inputs.action }}" >> $env:GITHUB_STEP_SUMMARY
        echo "**Subject:** ${{ github.event.inputs.certificate_subject }}" >> $env:GITHUB_STEP_SUMMARY
        
        if ("${{ github.event.inputs.action }}" -ne "export") {
          echo "**Validity period:** ${{ github.event.inputs.validity_days }} days" >> $env:GITHUB_STEP_SUMMARY
        }
        
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "### 📋 Next Steps" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "1. Download the certificate artifacts from this workflow run" >> $env:GITHUB_STEP_SUMMARY
        echo "2. Store the PFX file securely (it contains the private key)" >> $env:GITHUB_STEP_SUMMARY
        echo "3. Distribute the CRT file to users who need to trust the certificate" >> $env:GITHUB_STEP_SUMMARY
        echo "4. Update your build workflows to use the new certificate if needed" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "### 🔐 Security Notes" >> $env:GITHUB_STEP_SUMMARY
        echo "" >> $env:GITHUB_STEP_SUMMARY
        echo "- The certificate password is: \`$env:CERTIFICATE_PASSWORD\`" >> $env:GITHUB_STEP_SUMMARY
        echo "- Keep the PFX file secure and never commit it to version control" >> $env:GITHUB_STEP_SUMMARY
        echo "- Consider using GitHub Secrets to store certificate files for automated builds" >> $env:GITHUB_STEP_SUMMARY
